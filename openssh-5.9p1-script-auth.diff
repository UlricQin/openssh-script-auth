diff --git a/auth.c b/auth.c
index cd95da9..b91b7de 100644
--- a/auth.c
+++ b/auth.c
@@ -355,6 +355,15 @@ expand_authorized_keys(const char *filename, struct passwd *pw)
 }
 
 char *
+authorized_keys_script(struct passwd *pw)
+{
+	if (options.authorized_keys_script)
+		return expand_authorized_keys(options.authorized_keys_script, pw);
+	else
+		return NULL;
+}
+
+char *
 authorized_principals_file(struct passwd *pw)
 {
 	if (options.authorized_principals_file == NULL)
diff --git a/auth.h b/auth.h
index 0d786c4..46f245a 100644
--- a/auth.h
+++ b/auth.h
@@ -169,6 +169,7 @@ int	verify_response(Authctxt *, const char *);
 void	abandon_challenge_response(Authctxt *);
 
 char	*expand_authorized_keys(const char *, struct passwd *pw);
+char	*authorized_keys_script(struct passwd *);
 char	*authorized_principals_file(struct passwd *);
 
 FILE	*auth_openkeyfile(const char *, struct passwd *, int);
diff --git a/auth2-pubkey.c b/auth2-pubkey.c
index 137887e..b2680ef 100644
--- a/auth2-pubkey.c
+++ b/auth2-pubkey.c
@@ -254,6 +254,100 @@ match_principals_file(char *file, struct passwd *pw, struct KeyCert *cert)
 	return 0;
 }	
 
+/* check to see if the script specified by file can authorize the key
+ *
+ * the script will have the key written to STDIN, which is identical
+ * to the normal public key format.
+ *
+ * the script must exit with either 0 for success or 1 for failure.
+ * the script can print login options (if any) to STDOUT. No whitepace should be added
+ * to the output.
+ *
+ * Use with caution: the script can hang sshd. It is recommended you code the script
+ * with a timeout set if it cannot determine authenication quickly.
+ */
+static int
+user_key_found_by_script(struct passwd *pw, Key *key, char *file)
+{
+	pid_t pid;
+	char line[SSH_MAX_PUBKEY_BYTES];
+	int pipe_in[2];
+	int pipe_out[2];
+	int exit_code = 1;
+	int success = 0;
+	FILE *f;
+	//mysig_t oldsig;
+
+	pipe(pipe_in);
+	pipe(pipe_out);
+
+	//oldsig = signal(SIGCHLD, SIG_IGN);
+	temporarily_use_uid(pw);
+
+	debug3("user_key_found_by_script: executing %s", file);
+
+	switch ((pid = fork())) {
+	case -1:
+		error("fork(): %s", strerror(errno));
+		restore_uid();
+		return (-1);
+	case 0:
+		/* setup input pipe */
+		close(pipe_in[1]);
+		dup2(pipe_in[0], 0);
+		close(pipe_in[0]);
+
+		/* setup output pipe */
+		close(pipe_out[0]);
+		dup2(pipe_out[1], 1);
+		close(pipe_out[1]);
+
+		execl(file, file, NULL);
+
+		/* exec failed */
+		error("execl(): %s", strerror(errno));
+		_exit(1);
+	default:
+		debug3("user_key_found_by_script: script pid %d", pid);
+
+		close(pipe_in[0]);
+		close(pipe_out[1]);
+
+		f = fdopen(pipe_in[1], "w");
+		//print the username, a newline, then the provided public key
+		fprintf(f, pw->pw_name);
+		fprintf(f, "\n");
+		key_write(key, f);
+		fclose(f);
+
+		while(waitpid(pid, &exit_code, 0) < 0) {
+			switch(errno) {
+			case EINTR:
+				debug3("user_key_found_by_script: waitpid() EINTR, continuing");
+				continue;
+			default:
+				error("waitpid(): %s", strerror(errno));
+				goto waitpid_error;
+			}
+		}
+		if (WIFEXITED(exit_code) && WEXITSTATUS(exit_code) == 0) {
+			int amt_read = read(pipe_out[0], line, sizeof(line) - 1);
+			line[amt_read] = ' ';
+			line[amt_read + 1] = 0;
+			debug3("user_key_found_by_script: options: %s", line);
+			if (auth_parse_options(pw, line, file, 0) == 1)
+				success = 1;
+		}
+	 waitpid_error:
+		close(pipe_out[0]);
+	}
+
+	restore_uid();
+	//signal(SIGCHLD, oldsig);
+
+	return success;
+}
+
 /* return 1 if user allows given key */
 static int
 user_key_allowed2(struct passwd *pw, Key *key, char *file)
@@ -372,8 +466,15 @@ user_key_allowed2(struct passwd *pw, Key *key, char *file)
 	restore_uid();
 	fclose(f);
 	key_free(found);
-	if (!found_key)
+	if (!found_key) {
 		debug2("key not found");
+                debug("try the script to find the key");
+		/* try the script to find the key */
+		if ((file = authorized_keys_script(pw))) {
+			found_key = user_key_found_by_script(pw, key, file);
+			xfree(file);
+		}
+        }
 	return found_key;
 }
 
diff --git a/servconf.c b/servconf.c
index 91986e5..3a70d81 100644
--- a/servconf.c
+++ b/servconf.c
@@ -136,6 +136,7 @@ initialize_server_options(ServerOptions *options)
 	options->revoked_keys_file = NULL;
 	options->trusted_user_ca_keys = NULL;
 	options->authorized_principals_file = NULL;
+	options->authorized_keys_script = NULL;
 	options->ip_qos_interactive = -1;
 	options->ip_qos_bulk = -1;
 }
@@ -318,6 +319,7 @@ typedef enum {
 	sBanner, sUseDNS, sHostbasedAuthentication,
 	sHostbasedUsesNameFromPacketOnly, sClientAliveInterval,
 	sClientAliveCountMax, sAuthorizedKeysFile,
+	sAuthorizedKeysScript,
 	sGssAuthentication, sGssCleanupCreds, sAcceptEnv, sPermitTunnel,
 	sMatch, sPermitOpen, sForceCommand, sChrootDirectory,
 	sUsePrivilegeSeparation, sAllowAgentForwarding,
@@ -435,6 +437,7 @@ static struct {
 	{ "clientalivecountmax", sClientAliveCountMax, SSHCFG_GLOBAL },
 	{ "authorizedkeysfile", sAuthorizedKeysFile, SSHCFG_ALL },
 	{ "authorizedkeysfile2", sDeprecated, SSHCFG_ALL },
+	{ "authorizedkeysscript", sAuthorizedKeysScript, SSHCFG_ALL },
 	{ "useprivilegeseparation", sUsePrivilegeSeparation, SSHCFG_GLOBAL},
 	{ "acceptenv", sAcceptEnv, SSHCFG_GLOBAL },
 	{ "permittunnel", sPermitTunnel, SSHCFG_ALL },
@@ -1253,8 +1256,13 @@ process_server_config_line(ServerOptions *options, char *line,
 		}
 		return 0;
 
+	case sAuthorizedKeysScript:
+		charptr = &options->authorized_keys_script;
+		goto parse_tilde_filename;
+
 	case sAuthorizedPrincipalsFile:
 		charptr = &options->authorized_principals_file;
+ parse_tilde_filename:
 		arg = strdelim(&cp);
 		if (!arg || *arg == '\0')
 			fatal("%s line %d: missing file name.",
@@ -1756,6 +1764,7 @@ dump_config(ServerOptions *o)
 	dump_cfg_string(sChrootDirectory, o->chroot_directory);
 	dump_cfg_string(sTrustedUserCAKeys, o->trusted_user_ca_keys);
 	dump_cfg_string(sRevokedKeys, o->revoked_keys_file);
+	dump_cfg_string(sAuthorizedKeysScript, o->authorized_keys_script);
 	dump_cfg_string(sAuthorizedPrincipalsFile,
 	    o->authorized_principals_file);
 
diff --git a/servconf.h b/servconf.h
index 89f38e2..bfdcc26 100644
--- a/servconf.h
+++ b/servconf.h
@@ -154,6 +154,8 @@ typedef struct {
 	u_int num_authkeys_files;	/* Files containing public keys */
 	char   *authorized_keys_files[MAX_AUTHKEYS_FILES];
 
+	char   *authorized_keys_script;
+
 	char   *adm_forced_command;
 
 	int	use_pam;		/* Enable auth via PAM */
